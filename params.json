{"name":"Gr-gsm","tagline":"Gnuradio blocks and tools for receiving GSM transmissions","body":"The gr-gsm project\r\n==================\r\nThe project is based on the gsm-receiver which was written by me for the Airprobe project.\r\n\r\nThe aim is to provide set of tools for receiving information transmitted by GSM equipment/devices.\r\n\r\nInstallation\r\n============\r\n\r\nThe project is based on GNU Radio signal processing framework and takes advantage of its great features like stream tagging and message passing.\r\nPresence of GNU Radio is therefore a basic requirement for compilation and installation of gr-gsm. Installation of GNU Radio is described at the bottom of the page.\r\n\r\n\r\nCompilation and installation of gr-gsm\r\n======================================\r\n\r\nTo download gr-gsm sources run following command:\r\n\r\n```\r\ngit clone https://github.com/ptrkrysik/gr-gsm.git\r\n```\r\n\r\nMake sure that you have all required packages (checked on Ubuntu 14.04 and 14.10):\r\n\r\n```\r\nsudo apt-get install cmake libboost-all-dev libcppunit-dev swig \\\r\n                     doxygen liblog4cpp5-dev python-scipy\r\n```\r\n\r\nTo compile and install gr-gsm run:\r\n\r\n```\r\ncd gr-gsm\r\nmkdir build\r\ncmake ..\r\nmake\r\nsudo make install\r\n```\r\n\r\nUsage\r\n=====\r\nThere are many possible applications of gr-gsm. At this moment there is one application that is ready out of the box. It is improved replacement of the old Airprobe - the program that lets you receive and decode GSM control messages from timeslot 0 on the broadcasting channel of a BTS. After installation of gr-gsm there are three python executables that will be installed:\r\n-airprobe_rtlsdr.py,\r\n-airprobe_file.py.\r\n\r\nAirprobe_rtlsdr\r\n---------------\r\nThis program uses cheap RTL-SDR receivers as the source of the signal. It can be started by running from a terminal:\r\n```\r\nairprogre_rtlsdr.py\r\n``` \r\nIn the window of the program spectrum of the signal is drawn. The central frequency of the signal can be changed by moving fc slider. The GSM signal has bandwidth of around 200kHz. By looking for constant hills on the spectrum of such width you can find a GSM broadcasting channel. If everything set properly the program should immediately print content of subsequent messages on the standard output. If it doesn't happen set ppm slider into different positions. The slider is responsible for setting devices clock offset correction. If the clock offset is too large the clock offset correction algorithm that is implemented in the program won't work (there is intentionally added upper of allowable clock offset - it was done in order to avoid adaptation of the algorithm to neighbour channels). You can use the value set later by passing it as argument of the program:\r\n```\r\nairprogre_rtlsdr.py -p <correction>\r\n```\r\n\r\nAirprobe_file\r\n-------------\r\nThis program processes files containing complex data - interleaved float IQ samples.\r\nExample of the usage:\r\n```\r\nairprobe_file.py --samp-rate=1M --fc=940M -i input_file \r\n```\r\nwhere:\r\n```\r\n--samp-rate - sampling frequency of the data stored in the file,\r\n--fc - central frequency of the recorded data - it is needed for frequency offset correction,\r\n-i - the file containing the complex data.\r\n```\r\n\r\nObserving GSM messages in the Wireshark\r\n-------------------------------------------\r\nThe airprobe (file,usrp,rtlsdr) application sends GSM messages in GSMTAP format created by Harald Welte to the UDP port number 4729. Wireshark interprets packets coming on this port as GSM data with GSMTAP header and it is able to dissect messages\r\n\r\n\r\nInstallation of GNU Radio\r\n=========================\r\n\r\nBuilding GNU Radio from source\r\n------------------------------\r\nFor advanced users and developers it is advised to compile GNU Radio and required third party GNU Radio projects from source.\r\n\r\nIn order to compile GNU Radio with optional projects needed in order to receive data from USRP devices (uhd) and RTL-SDR devices (gr-osmosdr) run following commands:\r\n\r\n```\r\nsudo apt-get install git\r\ngit clone git://github.com/pybombs/pybombs\r\ncd pybombs\r\n./pybombs install gnuradio uhd gr-osmosdr\r\n```\r\n\r\nAt the first run pybombs will ask for configuration options. As a target directory select /usr/local/. The rest of the options can be left as default.\r\nPybombs will then take care of downloading all of required libraries for installation of gnuradio and it will build and install it in /usr/local/.\r\n\r\n\r\nInstallation of GNU Radio from packages (Ubuntu 14.10)\r\n------------------------------------------------------\r\nThe easier way to install gnuradio is installation from distribution's repository. Currently gr-gsm works with GNU Radio versions 3.7.3 and newer. On Ubuntu 14.10 it is possible to compile and use gr-gsm together with GNU Radio available from distribution's standard repository.\r\nTo do this install all required packages by entering following command in a terminal:\r\n\r\n```\r\nsudo apt-get install gnuradio-dev gr-osmosdr libgnuradio-uhd3.7.2.1\r\n```\r\n\r\nGr-gsm blocks that will be later installed will be located in /usr/local directory. To tell Gnu Radio Companion to look for blocks in there create config.conf in ~/.gnuradio directory:\r\n```\r\nmkdir ~/.gnuradio\r\ntouch ~/.gnuradio/config.conf\r\n```\r\n\r\nthen edit ~/.gnuradio/config.conf and put following text inside:\r\n```\r\n[grc]\r\nlocal_blocks_path=/usr/local/share/gnuradio/grc/blocks:/usr/share/gnuradio/grc/blocks\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}